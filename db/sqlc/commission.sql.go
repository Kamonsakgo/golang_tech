// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commission.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createcommission = `-- name: Createcommission :one
INSERT INTO commission (
  order_id,
  affiliate_id,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id, order_id, affiliate_id, amount
`

type CreatecommissionParams struct {
	OrderID     uuid.UUID `json:"order_id"`
	AffiliateID uuid.UUID `json:"affiliate_id"`
	Amount      string    `json:"amount"`
}

func (q *Queries) Createcommission(ctx context.Context, arg CreatecommissionParams) (Commission, error) {
	row := q.db.QueryRowContext(ctx, createcommission, arg.OrderID, arg.AffiliateID, arg.Amount)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.AffiliateID,
		&i.Amount,
	)
	return i, err
}

const getCommission = `-- name: GetCommission :one
SELECT id, order_id, affiliate_id, amount FROM commission
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCommission(ctx context.Context, id uuid.UUID) (Commission, error) {
	row := q.db.QueryRowContext(ctx, getCommission, id)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.AffiliateID,
		&i.Amount,
	)
	return i, err
}

const listCommission = `-- name: ListCommission :many
SELECT id, order_id, affiliate_id, amount FROM commission
ORDER BY id
`

func (q *Queries) ListCommission(ctx context.Context) ([]Commission, error) {
	rows, err := q.db.QueryContext(ctx, listCommission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Commission
	for rows.Next() {
		var i Commission
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.AffiliateID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
