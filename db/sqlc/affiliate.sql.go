// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: affiliate.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addBalance_affiliate = `-- name: AddBalance_affiliate :exec
UPDATE affiliate
SET balance = balance + $2
WHERE id = $1
`

type AddBalance_affiliateParams struct {
	ID      uuid.UUID `json:"id"`
	Balance string    `json:"balance"`
}

func (q *Queries) AddBalance_affiliate(ctx context.Context, arg AddBalance_affiliateParams) error {
	_, err := q.db.ExecContext(ctx, addBalance_affiliate, arg.ID, arg.Balance)
	return err
}

const createaffiliate = `-- name: Createaffiliate :one
INSERT INTO affiliate ( name, master_affiliate,balance)
VALUES ( $1, $2 , $3)
RETURNING id, name, master_affiliate, balance
`

type CreateaffiliateParams struct {
	Name            string        `json:"name"`
	MasterAffiliate uuid.NullUUID `json:"master_affiliate"`
	Balance         string        `json:"balance"`
}

func (q *Queries) Createaffiliate(ctx context.Context, arg CreateaffiliateParams) (Affiliate, error) {
	row := q.db.QueryRowContext(ctx, createaffiliate, arg.Name, arg.MasterAffiliate, arg.Balance)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const getAffiliateChain = `-- name: GetAffiliateChain :many
WITH RECURSIVE affiliate_chain AS (
  SELECT a.id, a.master_affiliate, a.balance
  FROM affiliate a
  WHERE a.id = $1

  UNION ALL

  SELECT a2.id, a2.master_affiliate, a2.balance
  FROM affiliate a2
  INNER JOIN affiliate_chain ac ON a2.id = ac.master_affiliate
)
SELECT ac.id, ac.master_affiliate, ac.balance
FROM affiliate_chain ac
`

type GetAffiliateChainRow struct {
	ID              uuid.UUID     `json:"id"`
	MasterAffiliate uuid.NullUUID `json:"master_affiliate"`
	Balance         string        `json:"balance"`
}

func (q *Queries) GetAffiliateChain(ctx context.Context, id uuid.UUID) ([]GetAffiliateChainRow, error) {
	rows, err := q.db.QueryContext(ctx, getAffiliateChain, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAffiliateChainRow
	for rows.Next() {
		var i GetAffiliateChainRow
		if err := rows.Scan(&i.ID, &i.MasterAffiliate, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getaffiliate = `-- name: Getaffiliate :one
SELECT id, name, master_affiliate, balance FROM affiliate
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getaffiliate(ctx context.Context, id uuid.UUID) (Affiliate, error) {
	row := q.db.QueryRowContext(ctx, getaffiliate, id)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const getaffiliateByname = `-- name: GetaffiliateByname :one
SELECT id, name, master_affiliate, balance FROM affiliate
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetaffiliateByname(ctx context.Context, name string) (Affiliate, error) {
	row := q.db.QueryRowContext(ctx, getaffiliateByname, name)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const listaffiliate = `-- name: Listaffiliate :many
SELECT id, name, master_affiliate, balance FROM affiliate
ORDER BY id
`

func (q *Queries) Listaffiliate(ctx context.Context) ([]Affiliate, error) {
	rows, err := q.db.QueryContext(ctx, listaffiliate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Affiliate
	for rows.Next() {
		var i Affiliate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MasterAffiliate,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
