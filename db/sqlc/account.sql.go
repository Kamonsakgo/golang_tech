// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addBalance = `-- name: AddBalance :one
UPDATE users
SET balance = balance + $2
WHERE id = $1
RETURNING id, username, balance, affiliate_id
`

type AddBalanceParams struct {
	ID      uuid.UUID `json:"id"`
	Balance string    `json:"balance"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addBalance, arg.ID, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
  username,
  balance,
  affiliate_id
) VALUES (
  $1, $2, $3
)
RETURNING id, username, balance, affiliate_id
`

type CreateUsersParams struct {
	Username    string        `json:"username"`
	Balance     string        `json:"balance"`
	AffiliateID uuid.NullUUID `json:"affiliate_id"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers, arg.Username, arg.Balance, arg.AffiliateID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const deductBalance = `-- name: DeductBalance :one
UPDATE users
SET balance = balance - $2
WHERE id = $1
RETURNING id, username, balance, affiliate_id
`

type DeductBalanceParams struct {
	ID      uuid.UUID `json:"id"`
	Balance string    `json:"balance"`
}

func (q *Queries) DeductBalance(ctx context.Context, arg DeductBalanceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, deductBalance, arg.ID, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBalance(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getBalance, id)
	var balance string
	err := row.Scan(&balance)
	return balance, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, balance, affiliate_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, balance, affiliate_id FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.AffiliateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAffiliate = `-- name: UpdateUserAffiliate :one
UPDATE users
SET affiliate_id = $2          
WHERE id = $1
RETURNING id, username, balance, affiliate_id
`

type UpdateUserAffiliateParams struct {
	ID          uuid.UUID     `json:"id"`
	AffiliateID uuid.NullUUID `json:"affiliate_id"`
}

func (q *Queries) UpdateUserAffiliate(ctx context.Context, arg UpdateUserAffiliateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAffiliate, arg.ID, arg.AffiliateID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}
