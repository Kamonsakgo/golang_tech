// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (
  name,
  quantity,
  price
) VALUES (
  $1, $2, $3
)
RETURNING id, name, quantity, price
`

type CreateProductParams struct {
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`
	Price    string `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Quantity, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE product
SET quantity = quantity - $2
WHERE id = $1 AND quantity >= $2
`

type DeleteProductParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, arg.ID, arg.Quantity)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, quantity, price FROM product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const getProduct_quantity = `-- name: GetProduct_quantity :one
SELECT quantity FROM product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct_quantity(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getProduct_quantity, id)
	var quantity int32
	err := row.Scan(&quantity)
	return quantity, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, name, quantity, price FROM product
ORDER BY id
`

func (q *Queries) ListProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
